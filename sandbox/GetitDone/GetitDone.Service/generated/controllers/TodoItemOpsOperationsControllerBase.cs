// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using Getitdone.Service.Models;
using Getitdone.Service;

namespace Getitdone.Service.Controllers
{
    [ApiController]
    public abstract partial class TodoItemOpsOperationsControllerBase : ControllerBase
    {

        internal abstract ITodoItemOpsOperations TodoItemOpsOperationsImpl { get; }


        [HttpGet]
        [Route("/todoitems/{todoitem_id}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(TodoItem))]
        public virtual async Task<IActionResult> GetTodoItem(string todoitemId)
        {
            var result = await TodoItemOpsOperationsImpl.GetTodoItemAsync(todoitemId);
            return Ok(result);
        }


        [HttpPost]
        [Route("/todoitems/{todoitem_id}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(TodoItem))]
        public virtual async Task<IActionResult> UpdateTodoItem(string todoitemId, UpdateTodoItemRequest body)
        {
            var result = await TodoItemOpsOperationsImpl.UpdateTodoItemAsync(todoitemId, body);
            return Ok(result);
        }


        [HttpPost]
        [Route("/todoitems/{todoitem_id}/close")]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> CloseTodoItem(string todoitemId)
        {
            await TodoItemOpsOperationsImpl.CloseTodoItemAsync(todoitemId);
            return Ok();
        }


        [HttpPost]
        [Route("/todoitems/{todoitem_id}/reopen")]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> ReopenTodoItem(string todoitemId)
        {
            await TodoItemOpsOperationsImpl.ReopenTodoItemAsync(todoitemId);
            return Ok();
        }


        [HttpDelete]
        [Route("/todoitems/{todoitem_id}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> DeleteTodoItem(string todoitemId)
        {
            await TodoItemOpsOperationsImpl.DeleteTodoItemAsync(todoitemId);
            return Ok();
        }

    }
}
