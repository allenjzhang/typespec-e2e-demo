// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Getitdone.Models;

namespace Getitdone
{
    /// <summary></summary>
    public partial class ProjectsProjectOps
    {
        private readonly Uri _endpoint;

        /// <summary> Initializes a new instance of ProjectsProjectOps for mocking. </summary>
        protected ProjectsProjectOps()
        {
        }

        internal ProjectsProjectOps(ClientPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] getProject
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="project_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetProject(string projectId, RequestOptions options)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            using PipelineMessage message = CreateGetProjectRequest(projectId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] getProject
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="project_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetProjectAsync(string projectId, RequestOptions options)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            using PipelineMessage message = CreateGetProjectRequest(projectId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> getProject. </summary>
        /// <param name="project_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Project> GetProject(string projectId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            ClientResult result = GetProject(projectId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((Project)result, result.GetRawResponse());
        }

        /// <summary> getProject. </summary>
        /// <param name="project_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Project>> GetProjectAsync(string projectId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            ClientResult result = await GetProjectAsync(projectId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((Project)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] updateProject
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="project_id"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult UpdateProject(string projectId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpdateProjectRequest(projectId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] updateProject
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="project_id"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> UpdateProjectAsync(string projectId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpdateProjectRequest(projectId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> updateProject. </summary>
        /// <param name="project_id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Project> UpdateProject(string projectId, UpdateProjectRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = UpdateProject(projectId, body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((Project)result, result.GetRawResponse());
        }

        /// <summary> updateProject. </summary>
        /// <param name="project_id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Project>> UpdateProjectAsync(string projectId, UpdateProjectRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await UpdateProjectAsync(projectId, body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((Project)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] deleteProject
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="project_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult DeleteProject(string projectId, RequestOptions options)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            using PipelineMessage message = CreateDeleteProjectRequest(projectId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] deleteProject
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="project_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> DeleteProjectAsync(string projectId, RequestOptions options)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            using PipelineMessage message = CreateDeleteProjectRequest(projectId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> deleteProject. </summary>
        /// <param name="project_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult DeleteProject(string projectId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            return DeleteProject(projectId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> deleteProject. </summary>
        /// <param name="project_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> DeleteProjectAsync(string projectId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            return await DeleteProjectAsync(projectId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] getCollaborators
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="project_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetCollaborators(string projectId, RequestOptions options)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            using PipelineMessage message = CreateGetCollaboratorsRequest(projectId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] getCollaborators
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="project_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetCollaboratorsAsync(string projectId, RequestOptions options)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            using PipelineMessage message = CreateGetCollaboratorsRequest(projectId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> getCollaborators. </summary>
        /// <param name="project_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<IList<Collaborator>> GetCollaborators(string projectId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            ClientResult result = GetCollaborators(projectId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            IList<Collaborator> value = new List<Collaborator>();
            using JsonDocument document = JsonDocument.Parse(result.GetRawResponse().ContentStream);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                value.Add(Collaborator.DeserializeCollaborator(item, ModelSerializationExtensions.WireOptions));
            }
            return ClientResult.FromValue(value, result.GetRawResponse());
        }

        /// <summary> getCollaborators. </summary>
        /// <param name="project_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<IList<Collaborator>>> GetCollaboratorsAsync(string projectId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));

            ClientResult result = await GetCollaboratorsAsync(projectId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            IList<Collaborator> value = new List<Collaborator>();
            using JsonDocument document = await JsonDocument.ParseAsync(result.GetRawResponse().ContentStream, default, default).ConfigureAwait(false);
            foreach (var item in document.RootElement.EnumerateArray())
            {
                value.Add(Collaborator.DeserializeCollaborator(item, ModelSerializationExtensions.WireOptions));
            }
            return ClientResult.FromValue(value, result.GetRawResponse());
        }
    }
}
