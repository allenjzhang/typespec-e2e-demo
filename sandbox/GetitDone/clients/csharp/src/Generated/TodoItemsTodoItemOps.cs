// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Getitdone.Models;

namespace Getitdone
{
    /// <summary></summary>
    public partial class TodoItemsTodoItemOps
    {
        private readonly Uri _endpoint;

        /// <summary> Initializes a new instance of TodoItemsTodoItemOps for mocking. </summary>
        protected TodoItemsTodoItemOps()
        {
        }

        internal TodoItemsTodoItemOps(ClientPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] getTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetTodoItem(string todoitemId, RequestOptions options)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            using PipelineMessage message = CreateGetTodoItemRequest(todoitemId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] getTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetTodoItemAsync(string todoitemId, RequestOptions options)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            using PipelineMessage message = CreateGetTodoItemRequest(todoitemId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> getTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<TodoItem> GetTodoItem(string todoitemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            ClientResult result = GetTodoItem(todoitemId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((TodoItem)result, result.GetRawResponse());
        }

        /// <summary> getTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<TodoItem>> GetTodoItemAsync(string todoitemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            ClientResult result = await GetTodoItemAsync(todoitemId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((TodoItem)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] updateTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult UpdateTodoItem(string todoitemId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpdateTodoItemRequest(todoitemId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] updateTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> UpdateTodoItemAsync(string todoitemId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpdateTodoItemRequest(todoitemId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> updateTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<TodoItem> UpdateTodoItem(string todoitemId, UpdateTodoItemRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = UpdateTodoItem(todoitemId, body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((TodoItem)result, result.GetRawResponse());
        }

        /// <summary> updateTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<TodoItem>> UpdateTodoItemAsync(string todoitemId, UpdateTodoItemRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await UpdateTodoItemAsync(todoitemId, body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((TodoItem)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] closeTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult CloseTodoItem(string todoitemId, RequestOptions options)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            using PipelineMessage message = CreateCloseTodoItemRequest(todoitemId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] closeTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> CloseTodoItemAsync(string todoitemId, RequestOptions options)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            using PipelineMessage message = CreateCloseTodoItemRequest(todoitemId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> closeTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult CloseTodoItem(string todoitemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            return CloseTodoItem(todoitemId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> closeTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> CloseTodoItemAsync(string todoitemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            return await CloseTodoItemAsync(todoitemId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] reopenTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult ReopenTodoItem(string todoitemId, RequestOptions options)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            using PipelineMessage message = CreateReopenTodoItemRequest(todoitemId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] reopenTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> ReopenTodoItemAsync(string todoitemId, RequestOptions options)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            using PipelineMessage message = CreateReopenTodoItemRequest(todoitemId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> reopenTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult ReopenTodoItem(string todoitemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            return ReopenTodoItem(todoitemId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> reopenTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> ReopenTodoItemAsync(string todoitemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            return await ReopenTodoItemAsync(todoitemId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] deleteTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult DeleteTodoItem(string todoitemId, RequestOptions options)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            using PipelineMessage message = CreateDeleteTodoItemRequest(todoitemId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] deleteTodoItem
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> DeleteTodoItemAsync(string todoitemId, RequestOptions options)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            using PipelineMessage message = CreateDeleteTodoItemRequest(todoitemId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> deleteTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult DeleteTodoItem(string todoitemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            return DeleteTodoItem(todoitemId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> deleteTodoItem. </summary>
        /// <param name="todoitem_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="todoitem_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> DeleteTodoItemAsync(string todoitemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(todoitemId, nameof(todoitemId));

            return await DeleteTodoItemAsync(todoitemId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
