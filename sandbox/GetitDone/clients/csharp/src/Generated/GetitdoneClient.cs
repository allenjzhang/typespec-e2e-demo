// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Threading;

namespace Getitdone
{
    /// <summary></summary>
    public partial class GetitdoneClient
    {
        private readonly Uri _endpoint;
        private Projects _cachedProjects;
        private Sections _cachedSections;
        private TodoItems _cachedTodoItems;
        private Comments _cachedComments;
        private Labels _cachedLabels;

        /// <summary> Initializes a new instance of GetitdoneClient. </summary>
        public GetitdoneClient() : this(new Uri("https://api.Getitdone.com"), new GetitdoneClientOptions())
        {
        }

        /// <summary> Initializes a new instance of GetitdoneClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public GetitdoneClient(Uri endpoint, GetitdoneClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new GetitdoneClientOptions();

            _endpoint = endpoint;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary> Initializes a new instance of Projects. </summary>
        public virtual Projects GetProjectsClient()
        {
            return Volatile.Read(ref _cachedProjects) ?? Interlocked.CompareExchange(ref _cachedProjects, new Projects(Pipeline, _endpoint), null) ?? _cachedProjects;
        }

        /// <summary> Initializes a new instance of Sections. </summary>
        public virtual Sections GetSectionsClient()
        {
            return Volatile.Read(ref _cachedSections) ?? Interlocked.CompareExchange(ref _cachedSections, new Sections(Pipeline, _endpoint), null) ?? _cachedSections;
        }

        /// <summary> Initializes a new instance of TodoItems. </summary>
        public virtual TodoItems GetTodoItemsClient()
        {
            return Volatile.Read(ref _cachedTodoItems) ?? Interlocked.CompareExchange(ref _cachedTodoItems, new TodoItems(Pipeline, _endpoint), null) ?? _cachedTodoItems;
        }

        /// <summary> Initializes a new instance of Comments. </summary>
        public virtual Comments GetCommentsClient()
        {
            return Volatile.Read(ref _cachedComments) ?? Interlocked.CompareExchange(ref _cachedComments, new Comments(Pipeline, _endpoint), null) ?? _cachedComments;
        }

        /// <summary> Initializes a new instance of Labels. </summary>
        public virtual Labels GetLabelsClient()
        {
            return Volatile.Read(ref _cachedLabels) ?? Interlocked.CompareExchange(ref _cachedLabels, new Labels(Pipeline, _endpoint), null) ?? _cachedLabels;
        }
    }
}
