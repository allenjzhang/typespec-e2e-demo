// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Getitdone;

namespace Getitdone.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class GetitdoneModelFactory
    {
        /// <summary> The Label. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="color"></param>
        /// <param name="order"></param>
        /// <param name="isFavorite"></param>
        /// <returns> A new <see cref="Models.Label"/> instance for mocking. </returns>
        public static Label Label(string id = default, string name = default, string color = default, int order = default, bool isFavorite = default)
        {

            return new Label(
                id,
                name,
                color,
                order,
                isFavorite,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The CreateLabelRequest. </summary>
        /// <param name="name"></param>
        /// <param name="color"></param>
        /// <param name="order"></param>
        /// <param name="isFavorite"></param>
        /// <returns> A new <see cref="Models.CreateLabelRequest"/> instance for mocking. </returns>
        public static CreateLabelRequest CreateLabelRequest(string name = default, string color = default, int? order = default, bool? isFavorite = default)
        {

            return new CreateLabelRequest(name, color, order, isFavorite, additionalBinaryDataProperties: null);
        }

        /// <summary> The RenameSharedLabelRequest. </summary>
        /// <param name="name"></param>
        /// <param name="newName"></param>
        /// <returns> A new <see cref="Models.RenameSharedLabelRequest"/> instance for mocking. </returns>
        public static RenameSharedLabelRequest RenameSharedLabelRequest(string name = default, string newName = default)
        {

            return new RenameSharedLabelRequest(name, newName, additionalBinaryDataProperties: null);
        }

        /// <summary> The RemoveSharedLabelRequest. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.RemoveSharedLabelRequest"/> instance for mocking. </returns>
        public static RemoveSharedLabelRequest RemoveSharedLabelRequest(string name = default)
        {

            return new RemoveSharedLabelRequest(name, additionalBinaryDataProperties: null);
        }

        /// <summary> The UpdateLabelRequest. </summary>
        /// <param name="name"></param>
        /// <param name="color"></param>
        /// <param name="order"></param>
        /// <param name="isFavorite"></param>
        /// <returns> A new <see cref="Models.UpdateLabelRequest"/> instance for mocking. </returns>
        public static UpdateLabelRequest UpdateLabelRequest(string name = default, string color = default, int? order = default, bool? isFavorite = default)
        {

            return new UpdateLabelRequest(name, color, order, isFavorite, additionalBinaryDataProperties: null);
        }

        /// <summary> The Comment. </summary>
        /// <param name="content"></param>
        /// <param name="id"></param>
        /// <param name="postedAt"></param>
        /// <param name="projectId"></param>
        /// <param name="todoitemId"></param>
        /// <param name="attachment"></param>
        /// <returns> A new <see cref="Models.Comment"/> instance for mocking. </returns>
        public static Comment Comment(string content = default, string id = default, string postedAt = default, string projectId = default, string todoitemId = default, Attachment attachment = default)
        {

            return new Comment(
                content,
                id,
                postedAt,
                projectId,
                todoitemId,
                attachment,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The Attachment. </summary>
        /// <param name="fileName"></param>
        /// <param name="fileType"></param>
        /// <param name="fileUrl"></param>
        /// <param name="resourceType"></param>
        /// <returns> A new <see cref="Models.Attachment"/> instance for mocking. </returns>
        public static Attachment Attachment(string fileName = default, string fileType = default, string fileUrl = default, string resourceType = default)
        {

            return new Attachment(fileName, fileType, fileUrl, resourceType, additionalBinaryDataProperties: null);
        }

        /// <summary> The CreateCommentRequest. </summary>
        /// <param name="content"></param>
        /// <param name="todoitemId"></param>
        /// <param name="projectId"></param>
        /// <param name="attachment"></param>
        /// <returns> A new <see cref="Models.CreateCommentRequest"/> instance for mocking. </returns>
        public static CreateCommentRequest CreateCommentRequest(string content = default, string todoitemId = default, string projectId = default, Attachment attachment = default)
        {

            return new CreateCommentRequest(content, todoitemId, projectId, attachment, additionalBinaryDataProperties: null);
        }

        /// <summary> The UpdateCommentRequest. </summary>
        /// <param name="content"></param>
        /// <param name="attachment"></param>
        /// <returns> A new <see cref="Models.UpdateCommentRequest"/> instance for mocking. </returns>
        public static UpdateCommentRequest UpdateCommentRequest(string content = default, Attachment attachment = default)
        {

            return new UpdateCommentRequest(content, attachment, additionalBinaryDataProperties: null);
        }

        /// <summary> The TodoItem. </summary>
        /// <param name="creatorId"></param>
        /// <param name="createdAt"></param>
        /// <param name="assigneeId"></param>
        /// <param name="assignerId"></param>
        /// <param name="commentCount"></param>
        /// <param name="isCompleted"></param>
        /// <param name="content"></param>
        /// <param name="description"></param>
        /// <param name="due"></param>
        /// <param name="duration"></param>
        /// <param name="id"></param>
        /// <param name="labels"></param>
        /// <param name="order"></param>
        /// <param name="priority"></param>
        /// <param name="projectId"></param>
        /// <param name="sectionId"></param>
        /// <param name="parentId"></param>
        /// <param name="url"></param>
        /// <returns> A new <see cref="Models.TodoItem"/> instance for mocking. </returns>
        public static TodoItem TodoItem(string creatorId = default, string createdAt = default, string assigneeId = default, string assignerId = default, int commentCount = default, bool isCompleted = default, string content = default, string description = default, Due due = default, string duration = default, string id = default, IEnumerable<string> labels = default, int order = default, int priority = default, string projectId = default, string sectionId = default, string parentId = default, string url = default)
        {
            labels ??= new ChangeTrackingList<string>();

            return new TodoItem(
                creatorId,
                createdAt,
                assigneeId,
                assignerId,
                commentCount,
                isCompleted,
                content,
                description,
                due,
                duration,
                id,
                labels?.ToList(),
                order,
                priority,
                projectId,
                sectionId,
                parentId,
                url,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The Due. </summary>
        /// <param name="date"></param>
        /// <param name="isRecurring"></param>
        /// <param name="datetime"></param>
        /// <param name="string"></param>
        /// <param name="timezone"></param>
        /// <returns> A new <see cref="Models.Due"/> instance for mocking. </returns>
        public static Due Due(string date = default, bool isRecurring = default, string datetime = default, string @string = default, string timezone = default)
        {

            return new Due(
                date,
                isRecurring,
                datetime,
                @string,
                timezone,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The CreateTodoItemRequest. </summary>
        /// <param name="content"></param>
        /// <param name="description"></param>
        /// <param name="due"></param>
        /// <param name="labels"></param>
        /// <param name="priority"></param>
        /// <param name="parentId"></param>
        /// <param name="order"></param>
        /// <param name="projectId"></param>
        /// <param name="sectionId"></param>
        /// <param name="assigneeId"></param>
        /// <returns> A new <see cref="Models.CreateTodoItemRequest"/> instance for mocking. </returns>
        public static CreateTodoItemRequest CreateTodoItemRequest(string content = default, string description = default, Due due = default, IEnumerable<string> labels = default, int? priority = default, string parentId = default, int? order = default, string projectId = default, string sectionId = default, string assigneeId = default)
        {
            labels ??= new ChangeTrackingList<string>();

            return new CreateTodoItemRequest(
                content,
                description,
                due,
                labels?.ToList(),
                priority,
                parentId,
                order,
                projectId,
                sectionId,
                assigneeId,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The UpdateTodoItemRequest. </summary>
        /// <param name="content"></param>
        /// <param name="description"></param>
        /// <param name="due"></param>
        /// <param name="labels"></param>
        /// <param name="priority"></param>
        /// <param name="parentId"></param>
        /// <param name="order"></param>
        /// <param name="projectId"></param>
        /// <param name="sectionId"></param>
        /// <param name="assigneeId"></param>
        /// <returns> A new <see cref="Models.UpdateTodoItemRequest"/> instance for mocking. </returns>
        public static UpdateTodoItemRequest UpdateTodoItemRequest(string content = default, string description = default, Due due = default, IEnumerable<string> labels = default, int? priority = default, string parentId = default, int? order = default, string projectId = default, string sectionId = default, string assigneeId = default)
        {
            labels ??= new ChangeTrackingList<string>();

            return new UpdateTodoItemRequest(
                content,
                description,
                due,
                labels?.ToList(),
                priority,
                parentId,
                order,
                projectId,
                sectionId,
                assigneeId,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The Section. </summary>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="order"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.Section"/> instance for mocking. </returns>
        public static Section Section(string id = default, string projectId = default, int order = default, string name = default)
        {

            return new Section(id, projectId, order, name, additionalBinaryDataProperties: null);
        }

        /// <summary> The CreateSectionRequest. </summary>
        /// <param name="name"></param>
        /// <param name="projectId"></param>
        /// <param name="order"></param>
        /// <returns> A new <see cref="Models.CreateSectionRequest"/> instance for mocking. </returns>
        public static CreateSectionRequest CreateSectionRequest(string name = default, string projectId = default, int? order = default)
        {

            return new CreateSectionRequest(name, projectId, order, additionalBinaryDataProperties: null);
        }

        /// <summary> The UpdateSectionRequest. </summary>
        /// <param name="name"></param>
        /// <param name="order"></param>
        /// <returns> A new <see cref="Models.UpdateSectionRequest"/> instance for mocking. </returns>
        public static UpdateSectionRequest UpdateSectionRequest(string name = default, int? order = default)
        {

            return new UpdateSectionRequest(name, order, additionalBinaryDataProperties: null);
        }

        /// <summary> The Project. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="commentCount"></param>
        /// <param name="order"></param>
        /// <param name="color"></param>
        /// <param name="isShared"></param>
        /// <param name="isFavorite"></param>
        /// <param name="parentId"></param>
        /// <param name="isInboxProject"></param>
        /// <param name="isTeamInbox"></param>
        /// <param name="viewStyle"></param>
        /// <param name="url"></param>
        /// <returns> A new <see cref="Models.Project"/> instance for mocking. </returns>
        public static Project Project(string id = default, string name = default, int commentCount = default, int order = default, string color = default, bool isShared = default, bool isFavorite = default, string parentId = default, bool isInboxProject = default, bool isTeamInbox = default, string viewStyle = default, string url = default)
        {

            return new Project(
                id,
                name,
                commentCount,
                order,
                color,
                isShared,
                isFavorite,
                parentId,
                isInboxProject,
                isTeamInbox,
                viewStyle,
                url,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The CreateProjectRequest. </summary>
        /// <param name="name"></param>
        /// <param name="color"></param>
        /// <param name="parentId"></param>
        /// <param name="order"></param>
        /// <param name="isFavorite"></param>
        /// <returns> A new <see cref="Models.CreateProjectRequest"/> instance for mocking. </returns>
        public static CreateProjectRequest CreateProjectRequest(string name = default, string color = default, string parentId = default, int? order = default, bool? isFavorite = default)
        {

            return new CreateProjectRequest(
                name,
                color,
                parentId,
                order,
                isFavorite,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The UpdateProjectRequest. </summary>
        /// <param name="name"></param>
        /// <param name="color"></param>
        /// <param name="parentId"></param>
        /// <param name="order"></param>
        /// <param name="isFavorite"></param>
        /// <returns> A new <see cref="Models.UpdateProjectRequest"/> instance for mocking. </returns>
        public static UpdateProjectRequest UpdateProjectRequest(string name = default, string color = default, string parentId = default, int? order = default, bool? isFavorite = default)
        {

            return new UpdateProjectRequest(
                name,
                color,
                parentId,
                order,
                isFavorite,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The Collaborator. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="email"></param>
        /// <returns> A new <see cref="Models.Collaborator"/> instance for mocking. </returns>
        public static Collaborator Collaborator(string id = default, string name = default, string email = default)
        {

            return new Collaborator(id, name, email, additionalBinaryDataProperties: null);
        }
    }
}
