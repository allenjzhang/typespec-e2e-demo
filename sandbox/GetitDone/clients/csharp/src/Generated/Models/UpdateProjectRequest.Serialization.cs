// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Getitdone;

namespace Getitdone.Models
{
    /// <summary></summary>
    public partial class UpdateProjectRequest : IJsonModel<UpdateProjectRequest>
    {
        void IJsonModel<UpdateProjectRequest>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<UpdateProjectRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UpdateProjectRequest)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Color))
            {
                writer.WritePropertyName("color"u8);
                writer.WriteStringValue(Color);
            }
            if (Optional.IsDefined(ParentId))
            {
                writer.WritePropertyName("parent_id"u8);
                writer.WriteStringValue(ParentId);
            }
            if (Optional.IsDefined(Order))
            {
                writer.WritePropertyName("order"u8);
                writer.WriteNumberValue(Order.Value);
            }
            if (Optional.IsDefined(IsFavorite))
            {
                writer.WritePropertyName("is_favorite"u8);
                writer.WriteBooleanValue(IsFavorite.Value);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        UpdateProjectRequest IJsonModel<UpdateProjectRequest>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual UpdateProjectRequest JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<UpdateProjectRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UpdateProjectRequest)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeUpdateProjectRequest(document.RootElement, options);
        }

        internal static UpdateProjectRequest DeserializeUpdateProjectRequest(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string color = default;
            string parentId = default;
            int? order = default;
            bool? isFavorite = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("name"u8))
                {
                    name = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("color"u8))
                {
                    color = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("parent_id"u8))
                {
                    parentId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("order"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    order = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("is_favorite"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isFavorite = prop.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new UpdateProjectRequest(
                name,
                color,
                parentId,
                order,
                isFavorite,
                additionalBinaryDataProperties);
        }

        BinaryData IPersistableModel<UpdateProjectRequest>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<UpdateProjectRequest>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(UpdateProjectRequest)} does not support writing '{options.Format}' format.");
            }
        }

        UpdateProjectRequest IPersistableModel<UpdateProjectRequest>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual UpdateProjectRequest PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<UpdateProjectRequest>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeUpdateProjectRequest(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(UpdateProjectRequest)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<UpdateProjectRequest>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="updateProjectRequest"> The <see cref="UpdateProjectRequest"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(UpdateProjectRequest updateProjectRequest)
        {
            if (updateProjectRequest == null)
            {
                return null;
            }
            return BinaryContent.Create(updateProjectRequest, ModelSerializationExtensions.WireOptions);
        }

        /// <param name="result"> The <see cref="ClientResult"/> to deserialize the <see cref="UpdateProjectRequest"/> from. </param>
        public static explicit operator UpdateProjectRequest(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeUpdateProjectRequest(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
