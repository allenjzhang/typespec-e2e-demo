// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Getitdone.Models;

namespace Getitdone
{
    /// <summary></summary>
    public partial class LabelsLabelOps
    {
        private readonly Uri _endpoint;

        /// <summary> Initializes a new instance of LabelsLabelOps for mocking. </summary>
        protected LabelsLabelOps()
        {
        }

        internal LabelsLabelOps(ClientPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] getPersonalLabel
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="label_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetPersonalLabel(string labelId, RequestOptions options)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));

            using PipelineMessage message = CreateGetPersonalLabelRequest(labelId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] getPersonalLabel
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="label_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetPersonalLabelAsync(string labelId, RequestOptions options)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));

            using PipelineMessage message = CreateGetPersonalLabelRequest(labelId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> getPersonalLabel. </summary>
        /// <param name="label_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Label> GetPersonalLabel(string labelId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));

            ClientResult result = GetPersonalLabel(labelId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((Label)result, result.GetRawResponse());
        }

        /// <summary> getPersonalLabel. </summary>
        /// <param name="label_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Label>> GetPersonalLabelAsync(string labelId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));

            ClientResult result = await GetPersonalLabelAsync(labelId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((Label)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] updateLabel
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="label_id"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult UpdateLabel(string labelId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpdateLabelRequest(labelId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] updateLabel
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="label_id"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> UpdateLabelAsync(string labelId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpdateLabelRequest(labelId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> updateLabel. </summary>
        /// <param name="label_id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Label> UpdateLabel(string labelId, UpdateLabelRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = UpdateLabel(labelId, body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((Label)result, result.GetRawResponse());
        }

        /// <summary> updateLabel. </summary>
        /// <param name="label_id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Label>> UpdateLabelAsync(string labelId, UpdateLabelRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await UpdateLabelAsync(labelId, body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((Label)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] deleteLabel
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="label_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult DeleteLabel(string labelId, RequestOptions options)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));

            using PipelineMessage message = CreateDeleteLabelRequest(labelId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] deleteLabel
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="label_id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> DeleteLabelAsync(string labelId, RequestOptions options)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));

            using PipelineMessage message = CreateDeleteLabelRequest(labelId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> deleteLabel. </summary>
        /// <param name="label_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult DeleteLabel(string labelId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));

            return DeleteLabel(labelId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        /// <summary> deleteLabel. </summary>
        /// <param name="label_id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="label_id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> DeleteLabelAsync(string labelId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(labelId, nameof(labelId));

            return await DeleteLabelAsync(labelId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
