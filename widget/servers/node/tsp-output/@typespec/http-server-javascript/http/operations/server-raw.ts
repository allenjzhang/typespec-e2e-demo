// Generated by Microsoft TypeSpec

import * as http from "node:http";

import { HttpContext } from "../../helpers/router.js";

import { WidgetService } from "../../models/all/demo-service.js";

import {
  WidgetUpdate,
  WidgetCreate,
} from "../../models/all/typespec/rest/resource.js";

export async function widget_service_get(
  ctx: HttpContext,
  request: http.IncomingMessage,
  response: http.ServerResponse,
  operations: WidgetService,
  id: string,
): Promise<void> {
  const result = await operations.get(ctx, id);

  if ("id" in result) {
    response.end(JSON.stringify(result));
  } else if ("code" in result && result.code >= 400 && result.code <= 599) {
    response.statusCode = result.code;
    delete (result as any).code;
    response.end(JSON.stringify(result));
  }
}

export async function widget_service_update(
  ctx: HttpContext,
  request: http.IncomingMessage,
  response: http.ServerResponse,
  operations: WidgetService,
  id: string,
): Promise<void> {
  if (!request.headers["content-type"]?.startsWith("application/json")) {
    throw new Error(
      `Invalid Request: expected content-type 'application/json' but got '${request.headers["content-type"]?.split(";", 2)[0]}'.`,
    );
  }

  const properties = (await new Promise(function parseProperties(
    resolve,
    reject,
  ) {
    const chunks: Array<Buffer> = [];
    request.on("data", function appendChunk(chunk) {
      chunks.push(chunk);
    });
    request.on("end", function finalize() {
      resolve(JSON.parse(Buffer.concat(chunks).toString()));
    });
  })) as WidgetUpdate;

  const result = await operations.update(ctx, id, properties);

  if ("id" in result) {
    response.end(JSON.stringify(result));
  } else if ("code" in result && result.code >= 400 && result.code <= 599) {
    response.statusCode = result.code;
    delete (result as any).code;
    response.end(JSON.stringify(result));
  }
}

export async function widget_service_delete(
  ctx: HttpContext,
  request: http.IncomingMessage,
  response: http.ServerResponse,
  operations: WidgetService,
  id: string,
): Promise<void> {
  const result = await operations.delete(ctx, id);

  if ("code" in result && result.code >= 400 && result.code <= 599) {
    response.statusCode = result.code;
    delete (result as any).code;
    response.end(JSON.stringify(result));
  } else {
    response.statusCode = 200;
    response.end();
  }
}

export async function widget_service_create(
  ctx: HttpContext,
  request: http.IncomingMessage,
  response: http.ServerResponse,
  operations: WidgetService,
): Promise<void> {
  if (!request.headers["content-type"]?.startsWith("application/json")) {
    throw new Error(
      `Invalid Request: expected content-type 'application/json' but got '${request.headers["content-type"]?.split(";", 2)[0]}'.`,
    );
  }

  const resource = (await new Promise(function parseResource(resolve, reject) {
    const chunks: Array<Buffer> = [];
    request.on("data", function appendChunk(chunk) {
      chunks.push(chunk);
    });
    request.on("end", function finalize() {
      resolve(JSON.parse(Buffer.concat(chunks).toString()));
    });
  })) as WidgetCreate;

  const result = await operations.create(ctx, resource);

  if ("id" in result) {
    response.end(JSON.stringify(result));
  } else if ("statusCode" in result && result.statusCode === 201) {
    response.statusCode = result.statusCode;
    delete (result as any).statusCode;
    response.end(JSON.stringify(result));
  } else if ("code" in result && result.code >= 400 && result.code <= 599) {
    response.statusCode = result.code;
    delete (result as any).code;
    response.end(JSON.stringify(result));
  }
}

export async function widget_service_list(
  ctx: HttpContext,
  request: http.IncomingMessage,
  response: http.ServerResponse,
  operations: WidgetService,
): Promise<void> {
  const result = await operations.list(ctx);

  if ("value" in result) {
    response.end(JSON.stringify(result));
  } else if ("code" in result && result.code >= 400 && result.code <= 599) {
    response.statusCode = result.code;
    delete (result as any).code;
    response.end(JSON.stringify(result));
  }
}
