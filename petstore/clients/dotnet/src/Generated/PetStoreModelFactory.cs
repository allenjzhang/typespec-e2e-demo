// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using TypeSpec.Rest.Resource;

namespace PetStore
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class PetStoreModelFactory
    {
        /// <summary> The Insurance. </summary>
        /// <param name="provider"></param>
        /// <param name="premium"></param>
        /// <param name="deductible"></param>
        /// <returns> A new <see cref="PetStore.Insurance"/> instance for mocking. </returns>
        public static Insurance Insurance(string provider = default, int premium = default, int deductible = default)
        {

            return new Insurance(provider, premium, deductible, additionalBinaryDataProperties: null);
        }

        /// <summary> The Checkup. </summary>
        /// <param name="id"></param>
        /// <param name="vetName"></param>
        /// <param name="notes"></param>
        /// <returns> A new <see cref="PetStore.Checkup"/> instance for mocking. </returns>
        public static Checkup Checkup(int id = default, string vetName = default, string notes = default)
        {

            return new Checkup(id, vetName, notes, additionalBinaryDataProperties: null);
        }

        /// <summary> Paged response of Checkup items. </summary>
        /// <param name="value"> The items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="TypeSpec.Rest.Resource.CheckupCollectionWithNextLink"/> instance for mocking. </returns>
        public static CheckupCollectionWithNextLink CheckupCollectionWithNextLink(IEnumerable<Checkup> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<Checkup>();

            return new CheckupCollectionWithNextLink(value?.ToList(), nextLink, additionalBinaryDataProperties: null);
        }

        /// <summary> The Owner. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="age"></param>
        /// <returns> A new <see cref="PetStore.Owner"/> instance for mocking. </returns>
        public static Owner Owner(long id = default, string name = default, int age = default)
        {

            return new Owner(id, name, age, additionalBinaryDataProperties: null);
        }

        /// <summary> Resource create operation model. </summary>
        /// <param name="name"></param>
        /// <param name="age"></param>
        /// <returns> A new <see cref="TypeSpec.Rest.Resource.OwnerCreate"/> instance for mocking. </returns>
        public static OwnerCreate OwnerCreate(string name = default, int age = default)
        {

            return new OwnerCreate(name, age, additionalBinaryDataProperties: null);
        }

        /// <summary> Paged response of Owner items. </summary>
        /// <param name="value"> The items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="TypeSpec.Rest.Resource.OwnerCollectionWithNextLink"/> instance for mocking. </returns>
        public static OwnerCollectionWithNextLink OwnerCollectionWithNextLink(IEnumerable<Owner> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<Owner>();

            return new OwnerCollectionWithNextLink(value?.ToList(), nextLink, additionalBinaryDataProperties: null);
        }

        /// <summary> The Toy. </summary>
        /// <param name="id"></param>
        /// <param name="petId"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="PetStore.Toy"/> instance for mocking. </returns>
        public static Toy Toy(long id = default, long petId = default, string name = default)
        {

            return new Toy(id, petId, name, additionalBinaryDataProperties: null);
        }

        /// <summary> Paged response of Toy items. </summary>
        /// <param name="value"> The items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="TypeSpec.Rest.Resource.ToyCollectionWithNextLink"/> instance for mocking. </returns>
        public static ToyCollectionWithNextLink ToyCollectionWithNextLink(IEnumerable<Toy> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<Toy>();

            return new ToyCollectionWithNextLink(value?.ToList(), nextLink, additionalBinaryDataProperties: null);
        }

        /// <summary> The Pet. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="age"></param>
        /// <param name="ownerId"></param>
        /// <returns> A new <see cref="PetStore.Pet"/> instance for mocking. </returns>
        public static Pet Pet(int id = default, string name = default, string tag = default, int age = default, long ownerId = default)
        {

            return new Pet(
                id,
                name,
                tag,
                age,
                ownerId,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Resource create operation model. </summary>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="age"></param>
        /// <param name="ownerId"></param>
        /// <returns> A new <see cref="TypeSpec.Rest.Resource.PetCreate"/> instance for mocking. </returns>
        public static PetCreate PetCreate(string name = default, string tag = default, int age = default, long ownerId = default)
        {

            return new PetCreate(name, tag, age, ownerId, additionalBinaryDataProperties: null);
        }

        /// <summary> Paged response of Pet items. </summary>
        /// <param name="value"> The items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="TypeSpec.Rest.Resource.PetCollectionWithNextLink"/> instance for mocking. </returns>
        public static PetCollectionWithNextLink PetCollectionWithNextLink(IEnumerable<Pet> value = default, Uri nextLink = default)
        {
            value ??= new ChangeTrackingList<Pet>();

            return new PetCollectionWithNextLink(value?.ToList(), nextLink, additionalBinaryDataProperties: null);
        }
    }
}
