// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.ContosoProviderHub.Service.Models;
using Microsoft.ContosoProviderHub.Service;

namespace Microsoft.ContosoProviderHub.Service.Controllers
{
    [ApiController]
    public abstract partial class EmployeesControllerBase : ControllerBase
    {

        internal abstract IEmployees EmployeesImpl { get; }

        ///<summary>
        /// Get a Employee
        ///</summary>
        [HttpGet]
        [Route("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContosoProviderHub/employees/{employeeName}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Employee))]
        public virtual async Task<IActionResult> Get([FromQuery(Name = "api-version")] string apiVersion, string subscriptionId, string resourceGroupName, string employeeName)
        {
            var result = await EmployeesImpl.GetAsync(apiVersion, subscriptionId, resourceGroupName, employeeName);
            return Ok(result);
        }

        ///<summary>
        /// Create a Employee
        ///</summary>
        [HttpPut]
        [Route("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContosoProviderHub/employees/{employeeName}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Employee))]
        [ProducesResponseType((int)HttpStatusCode.Created, Type = typeof(Employee))]
        public virtual async Task<IActionResult> CreateOrUpdate([FromQuery(Name = "api-version")] string apiVersion, string subscriptionId, string resourceGroupName, string employeeName, Employee body)
        {
            var result = await EmployeesImpl.CreateOrUpdateAsync(apiVersion, subscriptionId, resourceGroupName, employeeName, body);
            return Ok(result);
        }

        ///<summary>
        /// Update a Employee
        ///</summary>
        [HttpPatch]
        [Route("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContosoProviderHub/employees/{employeeName}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Employee))]
        public virtual async Task<IActionResult> Update([FromQuery(Name = "api-version")] string apiVersion, string subscriptionId, string resourceGroupName, string employeeName, Employee body)
        {
            var result = await EmployeesImpl.UpdateAsync(apiVersion, subscriptionId, resourceGroupName, employeeName, body);
            return Ok(result);
        }

        ///<summary>
        /// Delete a Employee
        ///</summary>
        [HttpDelete]
        [Route("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContosoProviderHub/employees/{employeeName}")]
        [ProducesResponseType((int)HttpStatusCode.Accepted, Type = typeof(void))]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> Delete([FromQuery(Name = "api-version")] string apiVersion, string subscriptionId, string resourceGroupName, string employeeName)
        {
            await EmployeesImpl.DeleteAsync(apiVersion, subscriptionId, resourceGroupName, employeeName);
            return Ok();
        }

        ///<summary>
        /// List Employee resources by resource group
        ///</summary>
        [HttpGet]
        [Route("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContosoProviderHub/employees")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(EmployeeListResult))]
        public virtual async Task<IActionResult> ListByResourceGroup([FromQuery(Name = "api-version")] string apiVersion, string subscriptionId, string resourceGroupName)
        {
            var result = await EmployeesImpl.ListByResourceGroupAsync(apiVersion, subscriptionId, resourceGroupName);
            return Ok(result);
        }

        ///<summary>
        /// List Employee resources by subscription ID
        ///</summary>
        [HttpGet]
        [Route("/subscriptions/{subscriptionId}/providers/Microsoft.ContosoProviderHub/employees")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(EmployeeListResult))]
        public virtual async Task<IActionResult> ListBySubscription([FromQuery(Name = "api-version")] string apiVersion, string subscriptionId)
        {
            var result = await EmployeesImpl.ListBySubscriptionAsync(apiVersion, subscriptionId);
            return Ok(result);
        }

        ///<summary>
        /// A sample resource action that move employee to different location
        ///</summary>
        [HttpPost]
        [Route("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContosoProviderHub/employees/{employeeName}/move")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(MoveResponse))]
        public virtual async Task<IActionResult> Move([FromQuery(Name = "api-version")] string apiVersion, string subscriptionId, string resourceGroupName, string employeeName, MoveRequest body)
        {
            var result = await EmployeesImpl.MoveAsync(apiVersion, subscriptionId, resourceGroupName, employeeName, body);
            return Ok(result);
        }

        ///<summary>
        /// A sample HEAD operation to check resource existence
        ///</summary>
        [HttpGet]
        [Route("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContosoProviderHub/employees/{employeeName}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> CheckExistence([FromQuery(Name = "api-version")] string apiVersion, string subscriptionId, string resourceGroupName, string employeeName)
        {
            await EmployeesImpl.CheckExistenceAsync(apiVersion, subscriptionId, resourceGroupName, employeeName);
            return Ok();
        }

    }
}
