// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Todo;

namespace Todo.Models
{
    /// <summary> The User. </summary>
    public partial class User
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="User"/>. </summary>
        /// <param name="username"> The user's username. </param>
        /// <param name="email"> The user's email address. </param>
        /// <param name="password">
        /// The user's password, provided when creating a user
        /// but is otherwise not visible (and hashed by the backend)
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="username"/>, <paramref name="email"/> or <paramref name="password"/> is null. </exception>
        public User(string username, string email, string password)
        {
            Argument.AssertNotNull(username, nameof(username));
            Argument.AssertNotNull(email, nameof(email));
            Argument.AssertNotNull(password, nameof(password));

            Username = username;
            Email = email;
            Password = password;
        }

        internal User(long id, string username, string email, string password, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Id = id;
            Username = username;
            Email = email;
            Password = password;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> An autogenerated unique id for the user. </summary>
        public long Id { get; }

        /// <summary> The user's username. </summary>
        public string Username { get; }

        /// <summary> The user's email address. </summary>
        public string Email { get; }

        /// <summary>
        /// The user's password, provided when creating a user
        /// but is otherwise not visible (and hashed by the backend)
        /// </summary>
        public string Password { get; }
    }
}
