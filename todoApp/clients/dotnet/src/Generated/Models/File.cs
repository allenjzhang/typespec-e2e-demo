// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Todo;

namespace TypeSpec.Http
{
    /// <summary> A file in an HTTP request, response, or multipart payload. </summary>
    internal partial class File
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="File"/>. </summary>
        /// <param name="contents">
        /// The contents of the file.
        /// 
        /// In file bodies, this value comes from the body of the request, response, or multipart payload. In JSON bodies,
        /// this value is serialized as a field in the response.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contents"/> is null. </exception>
        public File(BinaryData contents)
        {
            Argument.AssertNotNull(contents, nameof(contents));

            Contents = contents;
        }

        internal File(string contentType, string filename, BinaryData contents, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            ContentType = contentType;
            Filename = filename;
            Contents = contents;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary>
        /// The allowed media (MIME) types of the file contents.
        /// 
        /// In file bodies, this value comes from the `Content-Type` header of the request or response. In JSON bodies,
        /// this value is serialized as a field in the response.
        /// 
        /// NOTE: this is not _necessarily_ the same as the `Content-Type` header of the request or response, but
        /// it will be for file bodies. It may be different if the file is serialized as a JSON object. It always refers to the
        /// _contents_ of the file, and not necessarily the way the file itself is transmitted or serialized.
        /// </summary>
        public string ContentType { get; set; }

        /// <summary>
        /// The name of the file, if any.
        /// 
        /// In file bodies, this value comes from the `filename` parameter of the `Content-Disposition` header of the response
        /// or multipart payload. In JSON bodies, this value is serialized as a field in the response.
        /// 
        /// NOTE: By default, `filename` cannot be sent in request payloads and can only be sent in responses and multipart
        /// payloads, as the `Content-Disposition` header is not valid in requests. If you want to send the `filename` in a request,
        /// you must extend the `File` model and override the `filename` property with a different location defined by HTTP metadata
        /// decorators.
        /// </summary>
        public string Filename { get; set; }

        /// <summary>
        /// The contents of the file.
        /// 
        /// In file bodies, this value comes from the body of the request, response, or multipart payload. In JSON bodies,
        /// this value is serialized as a field in the response.
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromBytes(new byte[] { 1, 2, 3 }). </term>
        /// <description> Creates a payload of "AQID". </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Contents { get; }
    }
}
