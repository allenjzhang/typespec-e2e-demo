// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Todo;

namespace Todo._Users
{
    /// <summary> The InvalidUserResponse_code. </summary>
    internal readonly partial struct InvalidUserResponseCode : IEquatable<InvalidUserResponseCode>
    {
        private readonly string _value;
        /// <summary> invalid-user. </summary>
        private const string InvalidUserValue = "invalid-user";

        /// <summary> Initializes a new instance of <see cref="InvalidUserResponseCode"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InvalidUserResponseCode(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> invalid-user. </summary>
        public static InvalidUserResponseCode InvalidUser { get; } = new InvalidUserResponseCode(InvalidUserValue);

        /// <summary> Determines if two <see cref="InvalidUserResponseCode"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(InvalidUserResponseCode left, InvalidUserResponseCode right) => left.Equals(right);

        /// <summary> Determines if two <see cref="InvalidUserResponseCode"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(InvalidUserResponseCode left, InvalidUserResponseCode right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="InvalidUserResponseCode"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator InvalidUserResponseCode(string value) => new InvalidUserResponseCode(value);

        /// <param name="obj"> The object to compare. </param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InvalidUserResponseCode other && Equals(other);

        /// <param name="other"> The instance to compare. </param>
        public bool Equals(InvalidUserResponseCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
