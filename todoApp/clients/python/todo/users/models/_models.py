# coding=utf-8
# pylint: disable=useless-super-delegation

from typing import Any, Literal, Mapping, overload

from ... import _model_base
from ..._model_base import rest_field
from ...models import ApiError


class InvalidUserResponse(ApiError):
    """The user is invalid (e.g. forgot to enter email address).

    :ivar message: A human readable message. Required.
    :vartype message: str
    :ivar code: Required. Default value is "invalid-user".
    :vartype code: str
    """

    code: Literal["invalid-user"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required. Default value is \"invalid-user\"."""

    @overload
    def __init__(
        self,
        *,
        message: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.code: Literal["invalid-user"] = "invalid-user"


class UserCreatedResponse(_model_base.Model):
    """UserCreatedResponse.

    :ivar id: An autogenerated unique id for the user. Required.
    :vartype id: int
    :ivar username: The user's username. Required.
    :vartype username: str
    :ivar email: The user's email address. Required.
    :vartype email: str
    :ivar password: The user's password, provided when creating a user
     but is otherwise not visible (and hashed by the backend). Required.
    :vartype password: str
    :ivar token: The token to use to construct the validate email address url. Required.
    :vartype token: str
    """

    id: int = rest_field(visibility=["read"])
    """An autogenerated unique id for the user. Required."""
    username: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The user's username. Required."""
    email: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The user's email address. Required."""
    password: str = rest_field(visibility=["create"])
    """The user's password, provided when creating a user
     but is otherwise not visible (and hashed by the backend). Required."""
    token: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The token to use to construct the validate email address url. Required."""

    @overload
    def __init__(
        self,
        *,
        username: str,
        email: str,
        password: str,
        token: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserExistsResponse(ApiError):
    """The user already exists.

    :ivar message: A human readable message. Required.
    :vartype message: str
    :ivar code: Required. Default value is "user-exists".
    :vartype code: str
    """

    code: Literal["user-exists"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required. Default value is \"user-exists\"."""

    @overload
    def __init__(
        self,
        *,
        message: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.code: Literal["user-exists"] = "user-exists"
