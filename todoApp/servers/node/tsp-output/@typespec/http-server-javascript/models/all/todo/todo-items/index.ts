// Generated by Microsoft TypeSpec

import {
  TodoItem,
  Standard4XxResponse,
  Standard5XxResponse,
  TodoUrlAttachment,
  TodoFileAttachment,
  ToDoItemMultipartRequest,
  ApiError,
} from "../index.js";

import { NoContentResponse, NotFoundResponse } from "../../typespec/http.js";

import { ListOptions, CreateJsonOptions } from "../../../synthetic.js";

export interface TodoPage {
  /**
   * The items in the page
   */
  items: TodoItem[];

  /**
   * The number of items returned in this page
   */
  pageSize: number;

  /**
   * The total number of items
   */
  totalSize: number;

  /**
   * The limit to the number of items
   */
  limit?: number;

  /**
   * The offset to start paginating at
   */
  offset?: number;

  /**
   * A link to the previous page, if it exists
   */
  prevLink?: string;

  /**
   * A link to the next page, if it exists
   */
  nextLink?: string;
}

export interface TodoItemPatch {
  /**
   * The item's title
   */
  title?: string;

  /**
   * User that the todo is assigned to
   */
  assignedTo?: number | null;

  /**
   * A longer description of the todo item in markdown format
   */
  description?: string | null;

  /**
   * The status of the todo item
   */
  status?: "NotStarted" | "InProgress" | "Completed";
}

/** An interface representing the operations defined in the 'Todo.TodoItems.Attachments' namespace. */
export interface Attachments<Context = unknown> {
  list(
    ctx: Context,
    itemId: number,
  ): Promise<
    | TodoAttachmentPage
    | NotFoundErrorResponse
    | Standard4XxResponse
    | Standard5XxResponse
  >;

  createUrlAttachment(
    ctx: Context,
    itemId: number,
    contents: TodoUrlAttachment,
  ): Promise<
    | NoContentResponse
    | NotFoundResponse
    | Standard4XxResponse
    | Standard5XxResponse
  >;

  createFileAttachment(
    ctx: Context,
    itemId: number,
    contents: TodoFileAttachment,
  ): Promise<
    | NoContentResponse
    | NotFoundResponse
    | Standard4XxResponse
    | Standard5XxResponse
  >;
}

export interface TodoItemsOperations<Context = unknown> {
  list(
    ctx: Context,
    options?: ListOptions,
  ): Promise<TodoPage | Standard4XxResponse | Standard5XxResponse>;

  createJson(
    ctx: Context,
    item: TodoItem,
    options?: CreateJsonOptions,
  ): Promise<
    TodoItem | InvalidTodoItem | Standard4XxResponse | Standard5XxResponse
  >;

  createForm(
    ctx: Context,
    body: ToDoItemMultipartRequest,
  ): Promise<
    TodoItem | InvalidTodoItem | Standard4XxResponse | Standard5XxResponse
  >;

  get(ctx: Context, id: number): Promise<TodoItem | NotFoundErrorResponse>;

  update(ctx: Context, id: number, patch: TodoItemPatch): Promise<TodoItem>;

  delete(
    ctx: Context,
    id: number,
  ): Promise<
    | NoContentResponse
    | NotFoundErrorResponse
    | Standard4XxResponse
    | Standard5XxResponse
  >;
}

export interface PaginationControls {
  /**
   * The limit to the number of items
   */
  limit?: number;

  /**
   * The offset to start paginating at
   */
  offset?: number;
}

export interface InvalidTodoItem extends ApiError {
  statusCode: 422;
}

export interface NotFoundErrorResponse {
  statusCode: 404;

  code: "not-found";
}

export interface TodoAttachmentPage {
  items: Array<TodoFileAttachment | TodoUrlAttachment>;
}

export const TodoPage = {
  toJsonObject(input: TodoPage): object {
    return {
      items: input.items,
      pageSize: input.pageSize,
      totalSize: input.totalSize,
      limit: input.limit,
      offset: input.offset,
      prevLink: input.prevLink,
      nextLink: input.nextLink,
    };
  },
  fromJsonObject(input: object): TodoPage {
    return {
      items: input["items"],
      pageSize: input["pageSize"],
      totalSize: input["totalSize"],
      limit: input["limit"],
      offset: input["offset"],
      prevLink: input["prevLink"],
      nextLink: input["nextLink"],
    };
  },
} as const;
